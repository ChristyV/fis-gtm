;#################################################################
;#								 #
;#	Copyright 2006, 2008 Fidelity Information Services, Inc	 #
;#								 #
;#	This source code contains the intellectual property	 #
;#	of its copyright holder(s), and is made available	 #
;#	under a license.  If you do not know the terms of	 #
;# 	the license, please stop and do not read further.	 #
;#								 #
;#################################################################
	.title	OP_FNZEXTRACT

	mval$def

	$routine OP_FNZEXTRACT, entry=OP_FNZEXTRACT_CA, kind=null
	lda	sp, -48(sp)
	stq	r26, (sp)
	stq	r2, 8(sp)
	stq	r3, 16(sp)
	stq	r4, 24(sp)
	stq	r5, 32(sp)
	stq	r13, 40(sp)
	mov	r27, r13
	.base	r13, $ls

	mov	r16, r5			; r5 = second index
	mov	r17, r4			; r4 = first index
	mov	r18, r2			; r2 -> source mval
	mov	r19, r3			; r3 -> result mval

	mv_force_defined r2
	mv_force_str (r2)

	cmovle	r4, 1, r4		; r4 = start = max(1, first index)
	ldl	r1, mval$l_strlen(r2)	; r1 = length of source string
	subq	r4, r1, r24		; if start > source length,
	bgt	r24, 20$		; then result is a null string

	subq	r5, r1, r24
	cmovgt	r24, r1, r5		; r5 = end = min(source length, second index)
	subq	r5, r4, r0
	addq	r0, 1, r0		; r0 = result length = end - start + 1
	beq	r0, 10$
	blt	r0, 20$

	ldl	r28, mval$a_straddr(r2)	; r28 = address of source string
	addq	r4, r28, r4
	subq	r4, 1, r4		; r4 = result address = source address + start - 1
	stl	r4, mval$a_straddr(r3)

10$:	mov	mval$m_str, r28
	stl	r0, mval$l_strlen(r3)	; set result length
	stl	r28, mval$w_mvtype(r3)	; set result type (always a string)

	ldq	r28, (sp)
	ldq	r2, 8(sp)
	ldq	r3, 16(sp)
	ldq	r4, 24(sp)
	ldq	r5, 32(sp)
	ldq	r13, 40(sp)
	lda	sp, 48(sp)

	ret	r28

; Result is a null string:
20$:	clr	r0
	br	10$

	$end_routine

	.end
