;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                               ;
;       Copyright 2001, 2010 Fidelity Information Services, Inc  ;
;                                                               ;
;       This source code contains the intellectual property     ;
;       of its copyright holder(s), and is made available       ;
;       under a license.  If you do not know the terms of       ;
;       the license, please stop and do not read further.       ;
;                                                               ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	.title	OP_BKPT

	G_MSF

	$linkage_section

a_opp_ret:
	.linkage_pair opp_ret

a_op_retarg:
	.linkage_pair op_retarg

a_frame_pointer:
	.address frame_pointer

a_zstep_level:
	.address zstep_level


	$code_section


;*1*********************************************************************
	$routine OPP_ZSTEPRET, entry=OPP_ZSTEPRET_CA, kind=null
	lda	sp, -8(sp)
	stq	r3, (sp)
	mov	r27, r3
	.base	r3, $ls

	ldl	r28, msf$typ_off(r12)
	blbc	r28, 10$

	ldq	r28, a_zstep_level
	ldl	r28, (r28)
	subq	r28, r12, r28
	bgt	r28, 10$

	$call	op_zstepret, set_arg_info=false, nonstandard=true

10$:	ldq	r26, a_opp_ret
	ldq	r27, a_opp_ret+8
	ldq	r3, (sp)
	lda	sp, 8(sp)
	jmp	r26

	$end_routine

	.page
;*2*********************************************************************
	$routine OPP_ZSTEPRETARG, entry=OPP_ZSTEPRETARG_CA, kind=null
	lda	sp, -24(sp)
	stq	r3, (sp)
	stq	r0, 8(sp)
	stq	r1, 16(sp)
	mov	r27, r3
	.base	r3, $ls

	ldl	r28, msf$typ_off(r12)
	blbc	r28, 10$

	ldq	r28, a_zstep_level
	ldl	r28, (r28)
	subq	r28, r12, r28
	bgt	r28, 10$

	$call	op_zstepret, set_arg_info=false, nonstandard=true

10$:	ldq	r26, a_op_retarg
	ldq	r27, a_op_retarg+8
	ldq	r3, (sp)
	ldq	r0, 8(sp)
	ldq	r1, 16(sp)
	lda	sp, 24(sp)
	jmp	r26

	$end_routine


;*3*********************************************************************
	$routine OP_ZBFETCH, entry=OP_ZBFETCH_CA, kind=null
stack_offset = 16
	lda	sp, -stack_offset(sp)
	stq	r3, (sp)
	stq	r2, 8(sp)
	mov	r27, r3
	.base	r3, $ls

	stl	r26, msf$mpc_off(r12)

	fetch_args r2, stack_offset
	$call	op_zbreak, args=<r12>, set_arg_info=false, nonstandard=true

	getframe
	bne	r0, 10$

	imb

10$:	ldq	r3, (sp)
	ldq	r2, 8(sp)
	lda	sp, stack_offset(sp)
	ret	r26

	$end_routine

	.page
;*4*********************************************************************
	$routine OP_ZBSTART, entry=OP_ZBSTART_CA, kind=null
	lda	sp, -8(sp)
	stq	r3, (sp)
	mov	r27, r3
	.base	r3, $ls

	stl	r26, msf$mpc_off(r12)

	$call	op_zbreak, args=<r12>, set_arg_info=false, nonstandard=true

	getframe
	bne	r0, 10$

	imb

10$:	ldq	r3, (sp)
	lda	sp, 8(sp)
	ret	r26

	$end_routine


;*5*********************************************************************
	$routine OP_ZSTEPFETCH, entry=OP_ZSTEPFETCH_CA, kind=null
stack_offset = 16
	lda	sp, -stack_offset(sp)
	stq	r3, (sp)
	stq	r2, 8(sp)
	mov	r27, r3
	.base	r3, $ls

	stl	r26, msf$mpc_off(r12)

	fetch_args r2, stack_offset
	$call	op_zst_break, set_arg_info=false, nonstandard=true

	getframe
	imb

	ldq	r3, (sp)
	ldq	r2, 8(sp)
	lda	sp, stack_offset(sp)
	ret	r26

	$end_routine

	.page
;*6*********************************************************************
	$routine OP_ZSTEPSTART, entry=OP_ZSTEPSTART_CA, kind=null
	lda	sp, -8(sp)
	stq	r3, (sp)
	mov	r27, r3
	.base	r3, $ls

	stl	r26, msf$mpc_off(r12)

	$call	op_zst_break, set_arg_info=false, nonstandard=true

	getframe
	imb

	ldq	r3, (sp)
	lda	sp, 8(sp)
	ret	r26

	$end_routine


;*7*********************************************************************
	$routine OP_ZSTZBFETCH, entry=OP_ZSTZBFETCH_CA, kind=null
stack_offset = 16
	lda	sp, -stack_offset(sp)
	stq	r3, (sp)
	stq	r2, 8(sp)
	mov	r27, r3
	.base	r3, $ls

	stl	r26, msf$mpc_off(r12)

	fetch_args r2, stack_offset
	$call	op_zbreak, args=<r12>, set_arg_info=false, nonstandard=true
	$call	op_zst_break, set_arg_info=false, nonstandard=true

	getframe
	imb

	ldq	r3, (sp)
	ldq	r2, 8(sp)
	lda	sp, stack_offset(sp)
	ret	r26

	$end_routine

	.page
;*8*********************************************************************
	$routine OP_ZSTZBSTART, entry=OP_ZSTZBSTART_CA, kind=null
	lda	sp, -8(sp)
	stq	r3, (sp)
	mov	r27, r3
	.base	r3, $ls

	stl	r26, msf$mpc_off(r12)

	$call	op_zbreak, args=<r12>, set_arg_info=false, nonstandard=true
	$call	op_zst_break, set_arg_info=false, nonstandard=true

	getframe
	imb

	ldq	r3, (sp)
	lda	sp, 8(sp)
	ret	r26

	$end_routine

	.page
;*9*********************************************************************
	$routine OP_ZSTZB_FET_OVER, entry=OP_ZSTZB_FET_OVER_CA, kind=null
stack_offset = 16
	lda	sp, -stack_offset(sp)
	stq	r3, (sp)
	stq	r2, 8(sp)
	mov	r27, r3
	.base	r3, $ls

	stl	r26, msf$mpc_off(r12)

	fetch_args r2, stack_offset
	$call	op_zbreak, args=<r12>, set_arg_info=false, nonstandard=true

	ldq	r28, a_zstep_level
	ldl	r28, (r28)
	subq	r28, r12, r28
	ble	r28, 10$
	beq	r0, 20$

	$call	op_zst_over, set_arg_info=false, nonstandard=true

	ldl	r26, msf$mpc_off(r12)
	br	lbl30a

10$:	$call	op_zst_break, set_arg_info=false, nonstandard=true
20$:	getframe
	imb

lbl30a: ldq	r3, (sp)
	ldq	r2, 8(sp)
	lda	sp, stack_offset(sp)
	ret	r26

	$end_routine

	.page
;*10********************************************************************
	$routine OP_ZSTZB_ST_OVER, entry=OP_ZSTZB_ST_OVER_CA, kind=null
	lda	sp, -8(sp)
	stq	r3, (sp)
	mov	r27, r3
	.base	r3, $ls

	stl	r26, msf$mpc_off(r12)

	$call	op_zbreak, args=<r12>, set_arg_info=false, nonstandard=true

	ldq	r28, a_zstep_level
	ldl	r28, (r28)
	subq	r28, r12, r28
	ble	r28, 10$
	beq	r0, 20$

	$call	op_zst_over, set_arg_info=false, nonstandard=true

	ldl	r26, msf$mpc_off(r12)
	br	lbl30b

10$:	$call	op_zst_break, set_arg_info=false, nonstandard=true
20$:	getframe
	imb

lbl30b:	ldq	r3, (sp)
	lda	sp, 8(sp)
	ret	r26

	$end_routine

	.page
;*11********************************************************************
	$routine OP_ZST_FET_OVER, entry=OP_ZST_FET_OVER_CA, kind=null
stack_offset = 16
	lda	sp, -stack_offset(sp)
	stq	r3, (sp)
	stq	r2, 8(sp)
	mov	r27, r3
	.base	r3, $ls

	stl	r26, msf$mpc_off(r12)

	fetch_args r2, stack_offset

	ldq	r28, a_zstep_level
	ldl	r28, (r28)
	subq	r28, r12, r28
	bgt	r28, lbl10a

	$call	op_zst_break, set_arg_info=false, nonstandard=true

	getframe
	imb
	br	lbl20a

lbl10a:	$call	op_zst_over, set_arg_info=false, nonstandard=true

	ldl	r26, msf$mpc_off(r12)

lbl20a:	ldq	r3, (sp)
	ldq	r2, 8(sp)
	lda	sp, stack_offset(sp)
	ret	r26

	$end_routine

	.page
;*12********************************************************************
	$routine OP_ZST_ST_OVER, entry=OP_ZST_ST_OVER_CA, kind=null
	lda	sp, -8(sp)
	stq	r3, (sp)
	mov	r27, r3
	.base	r3, $ls

	stl	r26, msf$mpc_off(r12)

	ldq	r28, a_zstep_level
	ldl	r28, (r28)
	subq	r28, r12, r28
	bgt	r28, lbl10b

	$call	op_zst_break, set_arg_info=false, nonstandard=true

	getframe
	imb
	br	lbl20b

lbl10b:	$call	op_zst_over, set_arg_info=false, nonstandard=true

	ldl	r26, msf$mpc_off(r12)

lbl20b:	ldq	r3, (sp)
	lda	sp, 8(sp)
	ret	r26

	$end_routine

	.page
;*13********************************************************************
	$routine OPP_ZST_OVER_RET, entry=OPP_ZST_OVER_RET_CA, kind=null
	lda	sp, -8(sp)
	stq	r3, (sp)
	mov	r27, r3
	.base	r3, $ls

	ldl	r28, msf$typ_off(r12)
	blbc	r28, 10$

	ldq	r28, a_zstep_level
	ldl	r28, (r28)
	ldl	r24, msf$old_frame_off(r12)
	subq	r28, r24, r28
	bgt	r28, 10$

	$call	op_zstepret, set_arg_info=false, nonstandard=true

10$:	ldq	r26, a_opp_ret
	ldq	r27, a_opp_ret+8
	ldq	r3, (sp)
	lda	sp, 8(sp)
	jmp	r26

	$end_routine


;*14********************************************************************
	$routine OPP_ZST_OVER_RETARG, entry=OPP_ZST_OVER_RETARG_CA, kind=null
	lda	sp, -24(sp)
	stq	r3, (sp)
	stq	r0, 8(sp)
	stq	r1, 16(sp)
	mov	r27, r3
	.base	r3, $ls

	ldl	r28, msf$typ_off(r12)
	blbc	r28, 10$

	ldq	r28, a_zstep_level
	ldl	r28, (r28)
	ldl	r24, msf$old_frame_off(r12)
	subq	r28, r24, r28
	bgt	r28, 10$

	$call	op_zstepret, set_arg_info=false, nonstandard=true

10$:	ldq	r26, a_op_retarg
	ldq	r27, a_op_retarg+8
	ldq	r3, (sp)
	ldq	r0, 8(sp)
	ldq	r1, 16(sp)
	lda	sp, 24(sp)
	jmp	r26

	$end_routine

	.end
